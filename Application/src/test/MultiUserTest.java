package test;

import java.util.ArrayList;
import java.util.Arrays;
import static java.util.Arrays.asList;
import java.util.List;
import java.util.Random;
import model.Booking;
import model.DataAccess;
import model.DataAccessException;

/**
 * A multi-user (multi-thread) test program for {@link DataAccess}.
 * <p>
 * <i>Note to {@code DataAccess} implementors: </i> <br>
 * This program guarantees that any {@link model.Booking} object passed to the
 * {@link model.DataAccess#cancelBookings(List)} method was previously returned
 * by the {@link model.DataAccess#bookSeats(String, List, boolean)} or the
 * {@link model.DataAccess#bookSeats(String, List)} methods: booking IDs (if
 * any) generated by the {@code bookSeats} methods will be passed back to the
 * {@code cancelBookings} method without modification.
 *
 *
 * @author Jean-Michel Busca
 *
 */
public class MultiUserTest {

  //
  // CONSTANTS
  //
  private static final int USER_COUNT = 5; // count of competing users / threads
  private static final int CYCLE_COUNT = 10; // count of bookSeats - cancelBookings cyles

  //
  // CLASS FIELDS
  //
  private static Random random = new Random();
  private static TestStats test = new TestStats();

  //
  // HELPER CLASSES
  //
  /**
   * Emulates a customer performing booking operations.
   *
   * @author Jean-Michel Busca
   *
   */
  static class CustomerEmulator extends Thread {

    private final DataAccess dao;
    private final String customer;

    /**
     * Creates a new customer emulator with the specified name, using the
     * specified data access object.
     *
     * @param dao the data access object to use
     * @param customer the name of the customer running the test
     */
    public CustomerEmulator(DataAccess dao, String customer) {
      this.dao = dao;
      this.customer = customer;
    }

    @Override
    public String toString() {
      return customer;
    }

    @Override
    public void run() {
      System.out.println(this + ": starting");

      try {
        multiUserTests(dao, customer);
      } catch (DataAccessException e) {
        System.err.println(this + ": " + e);
      }

      System.out.println(this + ": exiting");
    }

    /**
     * Runs a multi-user test suite on the specified data access object on
     * behalf of the specified customer.
     *
     * @param dao the data access object to use
     * @param customer the name of the customer running the test
     *
     * @throws DataAccessException if anything goes wrong
     */
    private void multiUserTests(DataAccess dao, String customer) throws DataAccessException {

      // REMINDER: most of the tests below will fail until the DataAccess methods
      // are implemented.
      for (int i = 0; i < CYCLE_COUNT; i++) {

        boolean stable = random.nextDouble() <= 0.25;

        // retrieve available seats, in stable mode (25%) or not (75%)
        List<Integer> available = dao.getAvailableSeats(stable);
        System.out.println(this + "- available seats=" + available);
        if (available.isEmpty()) {
          continue;
        }

        // wait between 500 to 1500 ms (customer thinks)
        try {
          int time = random.nextInt(1000) + 500;
          System.out.println(this + "- waiting " + time + "ms");
          Thread.sleep(time);
        } catch (InterruptedException e) {
          System.err.println(this + "- interrupted!?");
        }

        // book half of the available seats in category #0
        List<Integer> toBook = available.subList(0, available.size() / 2 + 1);
        List<Booking> bookings = dao.bookSeats("Smith", asList(toBook));
        System.out.println("bookings=" + bookings);
        if (bookings.isEmpty()) {
          continue;
        }

        // cancel all the bookings made
        boolean canceled = dao.cancelBookings(bookings);
        System.out.println("canceled=" + canceled);

        // etc.
      }
    }

  }

  //
  // MAIN
  //
  /**
   * Runs the program.
   *
   * @param args the command line arguments: URL, login, password
   *
   * @throws DataAccessException for convenience (no try-catch needed)
   */
  public static void main(String[] args) throws DataAccessException {

    // add parameters
    if (args.length == 2) {
      args = Arrays.copyOf(args, 3);
      args[2] = "";
    }
    if (args.length != 3) {
      System.err.println("usage: SingleUserTest <url> <login> <password>");
      System.exit(1);
    }

    // launch the customer emulators
    List<DataAccess> daos = new ArrayList<>();
    try {

      // execute multi-users tests
      List<CustomerEmulator> emulators = new ArrayList<>();
      for (int i = 1; i <= USER_COUNT; i++) {
        DataAccess dao = new DataAccess(args[0], args[1], args[2]);
        daos.add(dao);
        CustomerEmulator emulator = new CustomerEmulator(dao, "customer#" + i);
        emulators.add(emulator);
        emulator.start();
      }

      // wait for the emulators to complete
      for (CustomerEmulator emulator : emulators) {
        emulator.join();
      }

      // check available seats
      List<Integer> available = daos.get(0).getAvailableSeats(false);
      System.out.println("available seats=" + available);

    } catch (DataAccessException | InterruptedException e) {

      System.err.println("test aborted: " + e);
      e.printStackTrace();

    } finally {

      for (DataAccess dao : daos) {
        try {
          dao.close();
        } catch (DataAccessException e) {
          System.err.println("unexpected exception: " + e);
        }
      }

    }

    // print test results
    System.out.println("test results: " + test);

  }

}
